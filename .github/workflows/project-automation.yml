name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed, assigned, labeled, unlabeled]
  pull_request:
    types: [opened, reopened, closed, assigned, review_requested, labeled, unlabeled]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT_ID: "3"  # Your project number
      VIEW_ID: "3"    # Your view number
    steps:
      - uses: actions/checkout@v4
      
      - name: Process Item
        run: |
          # Get the item details
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            item_id="${{ github.event.issue.node_id }}"
            labels="${{ toJson(github.event.issue.labels) }}"
          else
            item_id="${{ github.event.pull_request.node_id }}"
            labels="${{ toJson(github.event.pull_request.labels) }}"
          fi
          
          # Add to project
          echo "Adding item to project..."
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!) {
              addProjectV2ItemById(input: {projectId: $project contentId: $item}) {
                item {
                  id
                }
              }
            }' -f project="$PROJECT_ID" -f item="$item_id"
          
          # Set status based on action
          status=""
          case "${{ github.event.action }}" in
            "opened")
              status="Todo"
              ;;
            "assigned")
              status="In Progress"
              ;;
            "review_requested")
              status="Review"
              ;;
            "closed")
              status="Done"
              ;;
            "reopened")
              status="Todo"
              ;;
          esac
          
          if [ ! -z "$status" ]; then
            echo "Setting status to: $status"
            gh api graphql -f query='
              mutation($project:ID!, $item:ID!, $status:String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $project
                    itemId: $item
                    fieldId: "Status"
                    value: $status
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project="$PROJECT_ID" -f item="$item_id" -f status="$status"
          fi
          
          # Set priority based on labels
          priority=""
          if echo "$labels" | jq -e 'any(.name == "p0-critical")' > /dev/null; then
            priority="P0 - Critical üö®"
          elif echo "$labels" | jq -e 'any(.name == "high-priority")' > /dev/null; then
            priority="P1 - High Priority üî•"
          elif echo "$labels" | jq -e 'any(.name == "feature")' > /dev/null; then
            priority="P2 - Important üìà"
          else
            priority="P3 - Normal ‚≠ê"
          fi
          
          if [ ! -z "$priority" ]; then
            echo "Setting priority to: $priority"
            gh api graphql -f query='
              mutation($project:ID!, $item:ID!, $priority:String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $project
                    itemId: $item
                    fieldId: "Priority"
                    value: $priority
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project="$PROJECT_ID" -f item="$item_id" -f priority="$priority"
          fi