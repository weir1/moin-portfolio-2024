name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed, assigned, labeled, unlabeled]
  pull_request:
    types: [opened, reopened, closed, assigned, review_requested, labeled, unlabeled]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Add to Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) return;
            
            // Get project details
            const projects = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const project = projects.data.find(p => p.name === 'Moin Portfolio Website');
            if (!project) return;
            
            // Get project columns
            const columns = await github.rest.projects.listColumns({
              project_id: project.id
            });
            
            // Default to Todo column
            const todoColumn = columns.data.find(c => c.name === 'Todo');
            if (!todoColumn) return;
            
            // Check if card already exists
            const cards = await github.rest.projects.listCards({
              column_id: todoColumn.id
            });
            
            const existingCard = cards.data.find(c => {
              return c.content_url === item.url;
            });
            
            // Create card if it doesn't exist
            if (!existingCard) {
              await github.rest.projects.createCard({
                column_id: todoColumn.id,
                content_id: item.id,
                content_type: context.payload.issue ? 'Issue' : 'PullRequest'
              });
            }

  sync_labels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Sync Labels with Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) return;
            
            const labels = item.labels.map(label => label.name);
            
            // Define label mappings
            const labelMappings = {
              'p0-critical': 'P0 - Critical ðŸš¨',
              'high-priority': 'P1 - High Priority ðŸ”¥',
              'feature': 'P2 - Important ðŸ“ˆ',
              'frontend': 'Frontend',
              'backend': 'Backend',
              'design-system': 'Design System',
              'testing': 'Testing',
              'documentation': 'Documentation'
            };
            
            // Update project card with labels
            const projects = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const project = projects.data.find(p => p.name === 'Moin Portfolio Website');
            if (!project) return;
            
            // Get all columns
            const columns = await github.rest.projects.listColumns({
              project_id: project.id
            });
            
            // Find card in any column
            for (const column of columns.data) {
              const cards = await github.rest.projects.listCards({
                column_id: column.id
              });
              
              const card = cards.data.find(c => c.content_url === item.url);
              if (card) {
                // Update card note with labels
                const mappedLabels = labels
                  .map(label => labelMappings[label])
                  .filter(Boolean)
                  .join(', ');
                
                if (mappedLabels) {
                  await github.rest.projects.updateCard({
                    card_id: card.id,
                    note: `Labels: ${mappedLabels}`
                  });
                }
                break;
              }
            }