name: Auto Priority Assignment

on:
  issues:
    types: [labeled, unlabeled, opened, edited]
  pull_request:
    types: [labeled, unlabeled, opened, edited]

jobs:
  set_priority:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Priority based on Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) return;
            
            const labels = item.labels.map(label => label.name);
            
            let priority = '';
            if (labels.includes('p0-critical')) {
              priority = 'P0 - Critical 🚨';
            } else if (labels.includes('high-priority')) {
              priority = 'P1 - High Priority 🔥';
            } else if (labels.includes('feature')) {
              priority = 'P2 - Important 📈';
            } else {
              priority = 'P3 - Normal ⭐';
            }
            
            // Get project details
            const projects = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const project = projects.data.find(p => p.name === 'Moin Portfolio Website');
            if (!project) return;
            
            // Update project card
            const columns = await github.rest.projects.listColumns({
              project_id: project.id
            });
            
            // Find or create Priority column
            let priorityColumn = columns.data.find(c => c.name === 'Priority');
            if (!priorityColumn) {
              priorityColumn = await github.rest.projects.createColumn({
                project_id: project.id,
                name: 'Priority'
              });
            }
            
            // Create or update card
            const cards = await github.rest.projects.listCards({
              column_id: priorityColumn.id
            });
            
            const existingCard = cards.data.find(c => {
              return c.content_url === item.url;
            });
            
            if (existingCard) {
              await github.rest.projects.updateCard({
                card_id: existingCard.id,
                note: priority
              });
            } else {
              await github.rest.projects.createCard({
                column_id: priorityColumn.id,
                content_id: item.id,
                content_type: context.payload.issue ? 'Issue' : 'PullRequest',
                note: priority
              });
            }