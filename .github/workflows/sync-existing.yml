name: Sync Existing Issues

on:
  workflow_dispatch:  # This allows manual triggering

jobs:
  sync_existing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Project Info
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: project
        run: |
          # Get project info using the project number
          PROJECT_DATA=$(gh api graphql -f query='
            query {
              viewer {
                projectV2(number: 3) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                      ... on ProjectV2DateField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }')
          
          # Extract project ID
          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.data.viewer.projectV2.id')
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Found Project ID: $PROJECT_ID"
          
          # Extract field IDs
          FIELDS_JSON=$(echo "$PROJECT_DATA" | jq -r '.data.viewer.projectV2.fields.nodes')
          
          # Get field IDs
          PRIORITY_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name=="Priority") | .id')
          STATUS_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name=="Status") | .id')
          DATE_FIELD_ID=$(echo "$FIELDS_JSON" | jq -r '.[] | select(.name=="Due Date") | .id')
          
          echo "PRIORITY_FIELD_ID=$PRIORITY_FIELD_ID" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "DATE_FIELD_ID=$DATE_FIELD_ID" >> $GITHUB_ENV
          
          echo "Found Priority Field ID: $PRIORITY_FIELD_ID"
          echo "Found Status Field ID: $STATUS_FIELD_ID"
          echo "Found Date Field ID: $DATE_FIELD_ID"
      
      - name: Sync Existing Issues
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get all issues
          issues=$(gh api -X GET /repos/${{ github.repository }}/issues \
            -F state=all \
            -F per_page=100)
          
          # For each issue
          echo "$issues" | jq -c '.[]' | while read -r issue; do
            issue_number=$(echo "$issue" | jq -r '.number')
            title=$(echo "$issue" | jq -r '.title')
            node_id=$(echo "$issue" | jq -r '.node_id')
            
            echo "Processing issue #$issue_number: $title"
            
            # Add to project
            ADD_RESPONSE=$(gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$node_id")
            
            item_id=$(echo "$ADD_RESPONSE" | jq -r '.data.addProjectV2ItemById.item.id')
            echo "Added to project, got item ID: $item_id"
            
            # Get labels
            labels=$(echo "$issue" | jq -r '.labels[].name // empty')
            
            # Set priority based on labels
            if echo "$labels" | grep -q "p0-critical"; then
              priority="P0 - Critical üö®"
            elif echo "$labels" | grep -q "high-priority"; then
              priority="P1 - High Priority üî•"
            elif echo "$labels" | grep -q "feature"; then
              priority="P2 - Important üìà"
            else
              priority="P3 - Normal ‚≠ê"
            fi
            
            # Update priority
            echo "Setting priority to: $priority"
            gh api graphql -f query='
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f itemId="$item_id" -f fieldId="$PRIORITY_FIELD_ID" -f value="$priority"
            
            # Set due date (March 7, 2025)
            echo "Setting due date to 2025-03-07"
            gh api graphql -f query='
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f itemId="$item_id" -f fieldId="$DATE_FIELD_ID" -f value="2025-03-07"
            
            echo "Completed processing issue #$issue_number"
          done