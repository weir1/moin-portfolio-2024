name: Sync Existing Issues

on:
  workflow_dispatch:  # This allows manual triggering

jobs:
  sync_existing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Project Info
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: project
        run: |
          # First, list all projects to get the correct project ID
          PROJECTS=$(gh api graphql -f query='
            query {
              viewer {
                projectsV2(first: 20) {
                  nodes {
                    id
                    title
                    number
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }')
          
          # Extract project ID and fields for "Moin Portfolio Website" project
          PROJECT_DATA=$(echo "$PROJECTS" | jq -r '.data.viewer.projectsV2.nodes[] | select(.title=="Moin Portfolio Website")')
          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.id')
          
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          
          # Extract field IDs
          PRIORITY_FIELD_ID=$(echo "$PROJECT_DATA" | jq -r '.fields.nodes[] | select(.name=="Priority") | .id')
          STATUS_FIELD_ID=$(echo "$PROJECT_DATA" | jq -r '.fields.nodes[] | select(.name=="Status") | .id')
          DATE_FIELD_ID=$(echo "$PROJECT_DATA" | jq -r '.fields.nodes[] | select(.name=="Due Date") | .id')
          
          echo "PRIORITY_FIELD_ID=$PRIORITY_FIELD_ID" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "DATE_FIELD_ID=$DATE_FIELD_ID" >> $GITHUB_ENV
          
          echo "Found Project ID: $PROJECT_ID"
          echo "Priority Field ID: $PRIORITY_FIELD_ID"
          echo "Status Field ID: $STATUS_FIELD_ID"
          echo "Date Field ID: $DATE_FIELD_ID"
      
      - name: Sync Existing Issues
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get all issues
          issues=$(gh api -X GET /repos/${{ github.repository }}/issues \
            -F state=all \
            -F per_page=100)
          
          # For each issue
          echo "$issues" | jq -c '.[]' | while read -r issue; do
            issue_number=$(echo "$issue" | jq -r '.number')
            title=$(echo "$issue" | jq -r '.title')
            node_id=$(echo "$issue" | jq -r '.node_id')
            
            echo "Processing issue #$issue_number: $title"
            
            # Add to project
            item_id=$(gh api graphql -f query='
              mutation($input: AddProjectV2ItemByIdInput!) {
                addProjectV2ItemById(input: $input) {
                  item {
                    id
                  }
                }
              }' -f input="{\"projectId\":\"$PROJECT_ID\",\"contentId\":\"$node_id\"}" --jq '.data.addProjectV2ItemById.item.id')
            
            echo "Added to project, got item ID: $item_id"
            
            # Get labels
            labels=$(echo "$issue" | jq -r '.labels[].name // empty')
            
            # Set priority based on labels
            priority_value="{\"optionId\":\"P3 - Normal ‚≠ê\"}"
            if echo "$labels" | grep -q "p0-critical"; then
              priority_value="{\"optionId\":\"P0 - Critical üö®\"}"
            elif echo "$labels" | grep -q "high-priority"; then
              priority_value="{\"optionId\":\"P1 - High Priority üî•\"}"
            elif echo "$labels" | grep -q "feature"; then
              priority_value="{\"optionId\":\"P2 - Important üìà\"}"
            fi
            
            # Update priority
            echo "Setting priority..."
            gh api graphql -f query='
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }' -f input="{\"projectId\":\"$PROJECT_ID\",\"itemId\":\"$item_id\",\"fieldId\":\"$PRIORITY_FIELD_ID\",\"value\":$priority_value}"
            
            # Set due date (March 7, 2025)
            echo "Setting due date..."
            gh api graphql -f query='
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }' -f input="{\"projectId\":\"$PROJECT_ID\",\"itemId\":\"$item_id\",\"fieldId\":\"$DATE_FIELD_ID\",\"value\":\"2025-03-07\"}"
            
            echo "Processed issue #$issue_number"
          done