name: Sync Existing Issues

on:
  workflow_dispatch:  # This allows manual triggering

jobs:
  sync_existing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Project Fields
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: project_fields
        run: |
          echo "Getting project fields..."
          FIELDS_DATA=$(gh api graphql -f query='
            query {
              user(login: "weir1") {
                projectV2(number: 3) {
                  id
                  title
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' --jq '.data.user.projectV2')

          # Extract and store project ID
          PROJECT_ID=$(echo "$FIELDS_DATA" | jq -r '.id')
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Found Project ID: $PROJECT_ID"

          # Find Priority field and its options
          PRIORITY_DATA=$(echo "$FIELDS_DATA" | jq -r '.fields.nodes[] | select(.name=="Priority")')
          echo "Priority field data: $PRIORITY_DATA"
          
          PRIORITY_FIELD_ID=$(echo "$PRIORITY_DATA" | jq -r '.id')
          echo "PRIORITY_FIELD_ID=$PRIORITY_FIELD_ID" >> $GITHUB_ENV
          echo "Found Priority Field ID: $PRIORITY_FIELD_ID"

          # Find Date field
          DATE_FIELD_ID=$(echo "$FIELDS_DATA" | jq -r '.fields.nodes[] | select(.name=="Due Date") | .id')
          echo "DATE_FIELD_ID=$DATE_FIELD_ID" >> $GITHUB_ENV
          echo "Found Date Field ID: $DATE_FIELD_ID"

      - name: Sync Existing Issues
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get all issues
          issues=$(gh api -X GET /repos/${{ github.repository }}/issues \
            -F state=all \
            -F per_page=100)
          
          # For each issue
          echo "$issues" | jq -c '.[]' | while read -r issue; do
            issue_number=$(echo "$issue" | jq -r '.number')
            title=$(echo "$issue" | jq -r '.title')
            node_id=$(echo "$issue" | jq -r '.node_id')
            
            echo "Processing issue #$issue_number: $title"
            
            # Add to project
            ADD_RESPONSE=$(gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$node_id")
            
            item_id=$(echo "$ADD_RESPONSE" | jq -r '.data.addProjectV2ItemById.item.id')
            echo "Added to project, got item ID: $item_id"
            
            # Get labels
            labels=$(echo "$issue" | jq -r '.labels[].name // empty')
            
            # Set priority based on labels
            if echo "$labels" | grep -q "p0-critical"; then
              priority_value="P0 - Critical üö®"
            elif echo "$labels" | grep -q "high-priority"; then
              priority_value="P1 - High Priority üî•"
            elif echo "$labels" | grep -q "feature"; then
              priority_value="P2 - Important üìà"
            else
              priority_value="P3 - Normal ‚≠ê"
            fi
            
            if [ ! -z "$PRIORITY_FIELD_ID" ]; then
              # Update priority
              echo "Setting priority to $priority_value..."
              gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { text: $value }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f projectId="$PROJECT_ID" -f itemId="$item_id" -f fieldId="$PRIORITY_FIELD_ID" -f value="$priority_value"
            else
              echo "Warning: Priority field ID not found"
            fi
            
            if [ ! -z "$DATE_FIELD_ID" ]; then
              # Set due date (March 7, 2025)
              echo "Setting due date..."
              gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { 
                        date: "2025-03-07"
                      }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f projectId="$PROJECT_ID" -f itemId="$item_id" -f fieldId="$DATE_FIELD_ID"
            else
              echo "Warning: Date field ID not found"
            fi
            
            echo "Completed processing issue #$issue_number"
          done